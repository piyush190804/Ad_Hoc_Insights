/* 
Task_1:
Provide the list of markets in which customer  "Atliq  Exclusive"  operates its 
business in the  APAC  region. 
*/

SELECT 
	  DISTINCT market 
From dim_customer
WHERE customer= "Atliq Exclusive"
      AND
      region="APAC";


/* 
Task_2:
What is the percentage of unique product increase in 2021 vs. 2020? 
The final output contains these fields: unique _products_2020,unique_products_2021,percentage_chg 
*/
# using Common Table Expression

WITH cte1 as (
SELECT 
	  COUNT(DISTINCT product_code) as unique_products_2020
FROM fact_sales_monthly
WHERE fiscal_year= 2020
),

cte2 as (
SELECT 
	  COUNT(DISTINCT product_code) as unique_products_2021
FROM fact_sales_monthly
WHERE fiscal_year= 2021
)
SELECT 
	  unique_products_2020,
	  unique_products_2021,
	  (unique_products_2021-unique_products_2020)*100/unique_products_2020 as pct_change
from cte1
cross join cte2;


/*
Task_3: 
Provide a report with all the unique product counts for each segment and sort them in
descending order of product counts.The final output contains 2 fields: segment, product_count. 
*/

SELECT 
      DISTINCT(segment) as segment,
      COUNT(DISTINCT product_code) as product_count
FROM dim_product
GROUP BY segment
ORDER BY product_count DESC;


/*
Task_4: 
Follow-up: Which segment had the most increase in unique products in 2021 vs 2020?
The final output contains these fields: segment, product_count_2020, product_count_2021, difference.
*/

WITH cte1 as(
SELECT p.segment, COUNT(DISTINCT(s.product_code)) as product_count_2020
FROM dim_product p
JOIN fact_sales_monthly s
USING(product_code)
WHERE fiscal_year= 2020
GROUP BY segment
),
cte2 as (
SELECT p.segment, COUNT(DISTINCT(s.product_code)) as product_count_2021
FROM dim_product p
JOIN fact_sales_monthly s
USING(product_code)
WHERE fiscal_year= 2021
GROUP BY segment
)
SELECT  *, product_count_2021-product_count_2020 as difference
FROM cte1
JOIN cte2 
Using (segment);


/*
Task_5: 
Get the products that have the highest and lowest manufacturing costs. 
The final output should contain these fields: product_code ,product, manufacturing_cost.
*/ 

SELECT
      m.product_code, p.product,m.manufacturing_cost
FROM fact_manufacturing_cost m
JOIN dim_product p
USING (product_code)
WHERE m.manufacturing_cost IN (
     (SELECT MAX(manufacturing_cost) FROM fact_manufacturing_cost) ,
     (SELECT MIN(manufacturing_cost) FROM fact_manufacturing_cost)
     );


/*
Task_6:
Generate a report which contains the top 5 customers who received an average high 
pre_invoice_discount_pct for the  fiscal  year 2021 and in the Indian market.
The final output contains these fields: customer_code, customer, average_discount_percentage.
*/

SELECT 
      p.customer_code, c.customer, AVG(p.pre_invoice_discount_pct) as Avg_pct
FROM fact_pre_invoice_deductions p
JOIN dim_customer c
USING(customer_code)
WHERE p.fiscal_year= 2021 AND
      c.market="India"
GROUP BY p.customer_code, c.customer
ORDER BY Avg_pct DESC
LIMIT 5;


/*
Task_7: 
Get the complete report of the Gross sales amount for the customer “Atliq Exclusive” for each
month.This analysis helps to  get an idea of low and high-performing months and take strategic decisions. 
The final report contains these columns: Month ,Year ,Gross sales Amount.
*/  

SELECT 
      monthname(s.date) as Month,
      s.fiscal_year as Year,
      ROUND(SUM(s.sold_quantity*g.gross_price)/1000000, 2) as gross_sales_amount_in_millions
FROM fact_sales_monthly s 
JOIN fact_gross_price g
USING (product_code, fiscal_year)
JOIN dim_customer c
USING (customer_code)
where c.customer="Atliq Exclusive"
GROUP BY monthname(s.date), s.fiscal_year
ORDER BY s.fiscal_year ;


/*
Task_8: 
In which quarter of 2020, got the maximum total_sold_quantity?
The final output contains these fields:  Quarter ,total_sold_quantity.
*/

# Fiscal Year starts from 1st September and ends on 31st August
SELECT (
		CASE    
			 WHEN MONTH(date) IN (9, 10, 11) THEN "Q1"  
			 WHEN MONTH(date) IN ( 12,1, 2) THEN "Q2" 
			 WHEN MONTH(date) IN ( 3, 4, 5) THEN "Q3"     
			 WHEN MONTH(date) IN (6,7,8) THEN "Q4" 
		END) as Quarter,
ROUND(SUM(sold_quantity)/1000000,2) as total_qty_in_millions
FROM fact_sales_monthly 
WHERE fiscal_year = 2020 
GROUP BY Quarter
ORDER BY total_qty_in_millions DESC; 


/*
Task_9: 
Which channel helped to bring more gross sales in the fiscal year 2021 and the percentage of contribution?
The final output  contains these fields: channel ,gross_sales_mln ,percentage.
*/

with cte1 as(
SELECT c.channel, SUM(s.sold_quantity*g.gross_price) as total_sales
FROM fact_sales_monthly s
JOIN fact_gross_price g
USING (product_code, fiscal_year)
JOIN dim_customer c
USING (customer_code)
WHERE fiscal_year= 2021
GROUP BY channel
)
SELECT
      channel,
      ROUND((total_sales/1000000), 2) as gross_sales_in_millions,
      ROUND((total_sales / (SELECT SUM(total_sales) FROM cte1))*100, 2) as pct_contribution
FROM cte1
GROUP BY channel
ORDER BY pct_contribution DESC;


/*
Task_10:
Get the Top 3 products in each division that have a high total_sold_quantity in the fiscal_year 2021? 
The final output contains these fields: division, product_code, product, total_sold_quantity, rank_order.
*/

WITH cte1 as (
SELECT p.division, p.product_code, p.product, SUM(s.sold_quantity) as total_sold_quantity
FROM fact_sales_monthly s
JOIN dim_product p
USING (product_code)
WHERE s.fiscal_year= 2021
GROUP BY p.division,p.product_code,p.product
),
cte2 as (
SELECT *, DENSE_RANK() over(partition by division order by total_sold_quantity) as rnk 
FROM cte1
)
SELECT * FROM cte2
WHERE rnk<=3
ORDER BY rnk;